'''
    No: 1759
    Title: 암호 만들기
    Problem:
        바로 어제 최백준 조교가 방 열쇠를 주머니에 넣은 채 깜빡하고 서울로 가 버리는 황당한 상황에 직면한 조교들은, 702호에 새로운 보안 시스템을 설치하기로 하였다. 이 보안 시스템은 열쇠가 아닌 암호로 동작하게 되어 있는 시스템이다.
        암호는 서로 다른 L개의 알파벳 소문자들로 구성되며 최소 한 개의 모음(a, e, i, o, u)과 최소 두 개의 자음으로 구성되어 있다고 알려져 있다. 또한 정렬된 문자열을 선호하는 조교들의 성향으로 미루어 보아 암호를 이루는 알파벳이 암호에서 증가하는 순서로 배열되었을 것이라고 추측된다. 즉, abc는 가능성이 있는 암호이지만 bac는 그렇지 않다.
        새 보안 시스템에서 조교들이 암호로 사용했을 법한 문자의 종류는 C가지가 있다고 한다. 이 알파벳을 입수한 민식, 영식 형제는 조교들의 방에 침투하기 위해 암호를 추측해 보려고 한다. C개의 문자들이 모두 주어졌을 때, 가능성 있는 암호들을 모두 구하는 프로그램을 작성하시오.
    Input:
        첫째 줄에 두 정수 L, C가 주어진다. (3 ≤ L ≤ C ≤ 15) 다음 줄에는 C개의 문자들이 공백으로 구분되어 주어진다. 주어지는 문자들은 알파벳 소문자이며, 중복되는 것은 없다.
    Output:
        각 줄에 하나씩, 사전식으로 가능성 있는 암호를 모두 출력한다.
    Lang:
        Python 3
    Explanation:
        백트레킹을 이용하여 조건 내의 모음의 조합 경우의 수와 자음의 조합 경우의 수를 구하고 브루트포스를 통해 암호길이가 맞도록 모음조합과 자음조합을 합친 경우의 수를 구한 후, 이를 정렬해 출력한다.
'''

L,C = map(int, input().split()) # 표준 입력 처리 - L 암호길이, C 문자 후보 개수
A = [] # 모음 리스트
B = [] # 자음 리스트
for c in input().split(): # 모음 자음 분류
    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u':
        A.append(c)
    else:
        B.append(c)
A = sorted(A) # 이후 정렬에 좀 더 유리하도록 알파벳 순으로 정렬
B = sorted(B)
caseA = [] # 모음조합의 경우의 수 리스트
caseB = [] # 자음조합의 경우의 수 리스트
result = [] # 암호결과 경우의 수 리스트

def dfsA(_i, _l): # 모음조합 탐색
    if len(_l) > 0: # 1개 이상의 문자 조합일 경우에만 경우의 수 리스트에 추가
        caseA.append(_l[:])
    for i in range(_i, len(A)): # 하위 경우의 수 재귀 호출
        _l += [A[i]] # 딥카피를 방지하고 레퍼런스를 전달하기 위해 미리 변수에 다음 문자를 추가
        dfsA(i+1, _l) # 재귀 호출
        _l.pop(len(_l)-1) # 다른 경우의 수로 재귀 호출을 수행하기 위해 위에서 추가한 문자를 다시 제거

def dfsB(_i, _l): # 자음조합 탐색
    if len(_l) > 1: # 2개 이상의 문자 조합일 경우에만 경우의 수 리스트에 추가
        caseB.append(_l[:])
    for i in range(_i, len(B)): # 하위 경우의 수 재귀 호출
        _l += [B[i]] # 딥카피를 방지하고 레퍼런스를 전달하기 위해 미리 변수에 다음 문자를 추가
        dfsB(i+1, _l) # 재귀 호출
        _l.pop(len(_l)-1) # 다른 경우의 수로 재귀 호출을 수행하기 위해 위에서 추가한 문자를 다시 제거

dfsA(0, []) # 탐색 실행
dfsB(0, [])

for a in caseA: # 암호 길이에 맞도록 모음조합과 자음조합을 결합하여 암호결과 경우의 수 리스트에 추가
    for b in caseB:
        if len(b) == L-len(a): # (암호전체길이)-(모음조합의 길이)와 (자음조합의 길이)가 같다면 이 모음조합과 자음조합을 결합하고 완성된 문자열 내 문자들을 알파벳순으로 정렬한 뒤 리스트에 추가
            result.append(''.join(sorted(a+b)))
result = sorted(result) # 전체 암호결과 경우의 수를 알파벳순으로 정렬
for i in result: # 결과 출력
    print(i)