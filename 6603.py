'''
    No: 6603
    Title: 로또
    Problem:
        독일 로또는 {1, 2, ..., 49}에서 수 6개를 고른다.
        로또 번호를 선택하는데 사용되는 가장 유명한 전략은 49가지 수 중 k(k>6)개의 수를 골라 집합 S를 만든 다음 그 수만 가지고 번호를 선택하는 것이다.
        예를 들어, k=8, S={1,2,3,5,8,13,21,34}인 경우 이 집합 S에서 수를 고를 수 있는 경우의 수는 총 28가지이다. ([1,2,3,5,8,13], [1,2,3,5,8,21], [1,2,3,5,8,34], [1,2,3,5,13,21], ..., [3,5,8,13,21,34])
        집합 S와 k가 주어졌을 때, 수를 고르는 모든 방법을 구하는 프로그램을 작성하시오.
    Input:
        입력은 여러 개의 테스트 케이스로 이루어져 있다. 각 테스트 케이스는 한 줄로 이루어져 있다. 첫 번째 수는 k (6 < k < 13)이고, 다음 k개 수는 집합 S에 포함되는 수이다. S의 원소는 오름차순으로 주어진다.
        입력의 마지막 줄에는 0이 하나 주어진다. 
    Output:
        각 테스트 케이스마다 수를 고르는 모든 방법을 출력한다. 이때, 사전 순으로 출력한다.
        각 테스트 케이스 사이에는 빈 줄을 하나 출력한다.
    Lang:
        Python 3
    Explanation:
        dfs를 이용하여 모든 조합을 탐색한다.
'''

while True: # 테스트케이스 반복
    arr = list(map(int, input().split())) # 표준 입력 처리 - k, [...집합 S]
    n = arr.pop(0) # arr의 첫번째 요소인 k 부분을 pop 하면서 n에 대입
    if n == 0: # n이 0인 경우 반복 종료
        break

    cases = [] # 조합 경우의 수를 저장할 리스트
    def dfs(_i, _l): # dfs를 위한 함수 선언
        if len(_l) == 6: # 조합의 길이가 6이 됐을 경우 cases에 추가
            cases.append(_l)
            return
        for i in range(_i, n): # 조합 길이가 6이 아닐 경우, 재귀 호출
            dfs(i+1, _l+[arr[i]])

    dfs(0, []) # 탐색 시작
    for i in cases: # 탐색 결과 출력
        for j in range(len(i)):
            print(i[j], end=' ')
        print()
    print()