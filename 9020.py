'''
    No: 9020
    Title: 골드바흐의 추측
    Problem:
        1보다 큰 자연수 중에서  1과 자기 자신을 제외한 약수가 없는 자연수를 소수라고 한다. 예를 들어, 5는 1과 5를 제외한 약수가 없기 때문에 소수이다. 하지만, 6은 6 = 2 × 3 이기 때문에 소수가 아니다.
        골드바흐의 추측은 유명한 정수론의 미해결 문제로, 2보다 큰 모든 짝수는 두 소수의 합으로 나타낼 수 있다는 것이다. 이러한 수를 골드바흐 수라고 한다. 또, 짝수를 두 소수의 합으로 나타내는 표현을 그 수의 골드바흐 파티션이라고 한다. 예를 들면, 4 = 2 + 2, 6 = 3 + 3, 8 = 3 + 5, 10 = 5 + 5, 12 = 5 + 7, 14 = 3 + 11, 14 = 7 + 7이다. 10000보다 작거나 같은 모든 짝수 n에 대한 골드바흐 파티션은 존재한다.
        2보다 큰 짝수 n이 주어졌을 때, n의 골드바흐 파티션을 출력하는 프로그램을 작성하시오. 만약 가능한 n의 골드바흐 파티션이 여러 가지인 경우에는 두 소수의 차이가 가장 작은 것을 출력한다.

        - 4 ≤ n ≤ 10,000
    Input:
        첫째 줄에 테스트 케이스의 개수 T가 주어진다. 각 테스트 케이스는 한 줄로 이루어져 있고 짝수 n이 주어진다.
    Output:
        각 테스트 케이스에 대해서 주어진 n의 골드바흐 파티션을 출력한다. 출력하는 소수는 작은 것부터 먼저 출력하며, 공백으로 구분한다.
    Lang:
        Python 3
    Explanation:
        에라토스테네스의 체를 통해 소수의 배수들을 모두 필터링항 뒤, 주어진 n의 절반 값부터 왼쪽과 오른쪽으로 나눠져서 두 소수의 값을 탐색하면 된다.
        절반값에서부터 탐색을 시작하여 탐색 비용을 줄일 수 있다.
'''

arr = [True]*10001 # 에라토스테네스의 체를 통해 소수의 배수를 필터링하기 위한 리스트
for i in range(2, 10001): # i를 2부터 10000까지 1씩 증가
    if arr[i]: # arr[i]가 True(소수)라면 i의 배수를 모두 필터링
        for j in range(2, 10000//i+1):
            arr[i*j] = False

for t in range(int(input())): # 표준 입력 처리 - 테스트케이스 반복
    n = int(input()) # 표준 입력 처리
    a = b = int(n/2) # n의 절반 값에서부터 a는 -1, b는 +1씩 변화시켜 두 소수를 탐색한다
    for i in range(int(n/2)): # n의 절반만큼만 반복
        if arr[a] and arr[b]: # arr[a]와 arr[b]가 모두 소수라면 출력하고 종료
            print(a, b)
            break
        a-=1 # 위 조건식이 거짓일 경우, a를 -1, b를 +1한다
        b+=1